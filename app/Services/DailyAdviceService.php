<?php

namespace App\Services;

use App\Models\MenuItem;
use Carbon\Carbon;
use Illuminate\Support\Str;
use OpenAI;

class DailyAdviceService
{
    public function getTodayAdvice(): array
    {
        $now = Carbon::now('Asia/Almaty');
        $weekday = $now->isoWeekday();

        $menuToday = MenuItem::where('day', $weekday)->get();
        $cacheKey = "ai_advice_{$now->toDateString()}";

        // üëâ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–≤–µ—Ç –≤ –∫—ç—à–µ –Ω–∞ 24 —á–∞—Å–∞
        return cache()->remember($cacheKey, 86400, function () use ($menuToday, $weekday, $now) {
            // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º ChatGPT
            $aiAdvice = $this->getAdviceFromAI($menuToday);

            if ($aiAdvice) {
                return [
                    'date' => $now->toDateString(),
                    'weekday' => $this->weekdayRu($weekday),
                    'picks' => $menuToday->pluck('name')->toArray(),
                    'text' => $aiAdvice,
                ];
            }

            // –§–æ–ª–ª–±–µ–∫: —Ç–≤–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º
            [$pick1, $pick2] = $this->pickPair($menuToday);
            $text = $this->makeAdviceText($weekday, $pick1, $pick2);

            return [
                'date' => $now->toDateString(),
                'weekday' => $this->weekdayRu($weekday),
                'picks' => array_values(array_filter([$pick1, $pick2])),
                'text' => $text,
            ];
        });
    }

    private function getAdviceFromAI($menuToday): ?string
    {
        try {
            $menuList = $menuToday->pluck('name')->implode(', ');

            $prompt = "–°–µ–≥–æ–¥–Ω—è—à–Ω–µ–µ –º–µ–Ω—é: {$menuList}. 
            –î–∞–π –∫–æ—Ä–æ—Ç–∫–∏–π —Å–æ–≤–µ—Ç —É—á–µ–Ω–∏–∫–∞–º (1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è), —á—Ç–æ –ª—É—á—à–µ –≤—ã–±—Ä–∞—Ç—å –∏ –ø–æ—á–µ–º—É. 
            –ü–∏—à–∏ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ –∏ –ø—Ä–æ—Å—Ç–æ.";

            $client = OpenAI::client(env('OPENAI_API_KEY'));

            $result = $client->chat()->create([
                'model' => 'gpt-4o-mini',
                'messages' => [
                    ['role' => 'system', 'content' => '–¢—ã —É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ —à–∫–æ–ª—å–Ω–æ–π —Å—Ç–æ–ª–æ–≤–æ–π.'],
                    ['role' => 'user', 'content' => $prompt],
                ],
                'max_tokens' => 120,
            ]);

            return trim($result->choices[0]->message->content ?? '');
        } catch (\Exception $e) {
            \Log::error('AI Advice error: '.$e->getMessage());
            return null;
        }
    }

    private function weekdayRu(int $iso): string
    {
        return [
            1 => '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
            2 => '–í—Ç–æ—Ä–Ω–∏–∫',
            3 => '–°—Ä–µ–¥–∞',
            4 => '–ß–µ—Ç–≤–µ—Ä–≥',
            5 => '–ü—è—Ç–Ω–∏—Ü–∞',
            6 => '–°—É–±–±–æ—Ç–∞',
            7 => '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ',
        ][$iso] ?? '–î–µ–Ω—å';
    }

    private function pickPair($items): array
    {
        $soup = $items->first(fn($i) => Str::contains(mb_strtolower($i->name), ['—Å—É–ø','–±–æ—Ä—â','—â–∏','—Ä–∞—Å—Å–æ–ª—å–Ω–∏–∫','—É—Ö–∞']));
        $meat = $items->first(fn($i) => Str::contains(mb_strtolower($i->name), ['–∫–æ—Ç–ª–µ—Ç','–∫—É—Ä–∏—Ü','–≥–æ–≤—è–¥–∏–Ω','—Ç–µ—Ñ—Ç–µ–ª','–∂–∞—Ä–∫–æ–µ']));
        $side = $items->first(fn($i) => Str::contains(mb_strtolower($i->name), ['–ø—é—Ä–µ','—Ä–∏—Å','–≥—Ä–µ—á','–ø–ª–æ–≤','–º–∞–∫–∞—Ä–æ–Ω']));

        if ($soup && $side) return [$soup->name, $side->name];
        if ($meat && $side) return [$meat->name, $side->name];

        return [$items->get(0)?->name, $items->get(1)?->name];
    }

    private function makeAdviceText(int $weekday, ?string $pick1, ?string $pick2): string
    {
        $lines = [
            1 => '–ù–∞—á–∞–ª–æ –Ω–µ–¥–µ–ª–∏ –ª—É—á—à–µ –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –æ–±–µ–¥–æ–º.',
            2 => '–í–æ –≤—Ç–æ—Ä–Ω–∏–∫ –≤–∞–∂–Ω–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —ç–Ω–µ—Ä–≥–∏—é –¥–æ –∫–æ–Ω—Ü–∞ –¥–Ω—è.',
            3 => '–°—Ä–µ–¥–∞ ‚Äî —Å–µ—Ä–µ–¥–∏–Ω–∞ –Ω–µ–¥–µ–ª–∏: –≤—ã–±–∏—Ä–∞–π—Ç–µ –±–ª—é–¥–∞, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∑—è—Ç.',
            4 => '–ß–µ—Ç–≤–µ—Ä–≥ —Ç—Ä–µ–±—É–µ—Ç —Å–∏–ª –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ä—ã–≤–∫–∞.',
            5 => '–í –ø—è—Ç–Ω–∏—Ü—É –º–æ–∂–Ω–æ –ø–æ–∑–≤–æ–ª–∏—Ç—å —Å–µ–±–µ –≤–∫—É—Å–Ω–æ–µ, –Ω–æ –Ω–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –ø—Ä–æ –±–∞–ª–∞–Ω—Å.',
            6 => '–°—É–±–±–æ—Ç–∞ ‚Äî –≤—ã–±–∏—Ä–∞–π—Ç–µ –ø–∏—Ç–∞—Ç–µ–ª—å–Ω–æ, –Ω–æ –±–µ–∑ —Ç—è–∂–µ—Å—Ç–∏.',
            7 => '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ ‚Äî –º—è–≥–∫–∏–π –∫–æ–º—Ñ–æ—Ä—Ç–Ω—ã–π –±–∞–ª–∞–Ω—Å –±–ª—é–¥.',
        ];

        $weekdayRu = $this->weekdayRu($weekday);
        $pair = $pick1 ? "–•–æ—Ä–æ—à–∏–π –≤—ã–±–æ—Ä ‚Äî {$pick1}".($pick2 ? " –∏ {$pick2}" : '') : '';
        $hint = $lines[$weekday] ?? '';

        return "–°–µ–≥–æ–¥–Ω—è {$weekdayRu}. {$pair}. {$hint}";
    }
}
